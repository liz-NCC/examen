name: Build, Analyze and Deploy Locally

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_COMPOSE_PROJECT_NAME: 'examen-liz'
  APP_CONTAINER_NAME: 'product_app_2025'
  DB_CONTAINER_NAME: 'micro_product_db_2025'
  DB_NAME: 'micro_db_2025'
  DB_USER: 'root'
  DB_PASSWORD: 'rootpassword'

jobs:
  build-analyze-deploy:
    runs-on: self-hosted

    steps:
      - name: 1. Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: 2. Configurar Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 3. Limpiar despliegues anteriores y levantar SonarQube
        run: |
          echo "üßπ Limpiando entorno Docker anterior..."
          cd docker
          docker-compose -p ${{ env.DOCKER_COMPOSE_PROJECT_NAME }} down -v --remove-orphans || echo "‚ö†Ô∏è No se encontr√≥ un despliegue anterior."
          
          echo "üöÄ Levantando SonarQube y la Base de Datos..."
          # Levanta solo sonar y la db para el an√°lisis
          docker-compose -p ${{ env.DOCKER_COMPOSE_PROJECT_NAME }} up -d sonar db
          echo "‚è≥ Esperando 30 segundos a que SonarQube inicie..."
          sleep 30

      - name: 4. Construir y Analizar con SonarQube
        run: |
          echo "üî¨ Ejecutando an√°lisis de SonarQube..."
          # Usamos localhost:9000 porque el runner (host) tiene acceso a ese puerto
          mvn -B clean verify sonar:sonar \
            -Dsonar.login=${{ secrets.EXAMEN_LIZ }} \
            -Dsonar.host.url=http://localhost:9000

      - name: 5. Desplegar la aplicaci√≥n
        run: |
          echo "‚úÖ An√°lisis completado. Desplegando la aplicaci√≥n..."
          cd docker
          # Ahora levanta (o reconstruye y levanta) el servicio de la app
          docker-compose -p ${{ env.DOCKER_COMPOSE_PROJECT_NAME }} up -d --build app
          echo "‚è≥ Esperando 20 segundos para que la App se estabilice..."
          sleep 20

      - name: 6. Inicializar Base de Datos (Opcional)
        if: success() # Solo si los pasos anteriores funcionaron
        run: |
          echo "üíæ Ejecutando script de inicializaci√≥n SQL..."
          # Aseg√∫rate de que la ruta a tu archivo .sql sea correcta
          docker exec -i ${{ env.DB_CONTAINER_NAME }} mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} ${{ env.DB_NAME }} < ./sql/init.sql || echo "‚ö†Ô∏è No se pudo ejecutar el script SQL (¬øexiste en la carpeta 'sql'?)"

      - name: 7. Verificar estado final
        run: |
          echo "üéâ ¬°Despliegue completado!"
          echo "üîç Estado final de los contenedores:"
          cd docker
          docker-compose -p ${{ env.DOCKER_COMPOSE_PROJECT_NAME }} ps
          echo "üóíÔ∏è Logs recientes de la aplicaci√≥n:"
          docker logs --tail 100 ${{ env.APP_CONTAINER_NAME }}